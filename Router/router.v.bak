module router (
	input wire clk,
	input wire reset,
	input wire [31:0] in_data,	//Input data
	input wire req,			//Request Signal
	input wire [1:0] in_vc, 	//Input VC ID
	input wire in_head,		//Head flit
	input wire in_tail,		//Tail flit
	output wire [31:0] out_data,	//Output data
	output wire [1:0] out_vc,	//Output VC ID
	output wire grant,		//Grant signal(basically tells if valid data is there to transmit)
	input wire ready	
);

//VC Buffers
reg [31:0] vc_buffer[1:0];
reg vc_head[1:0];              	//Head flit flags for each VC
reg vc_tail[1:0];              	//Tail flit flags for each VC
reg vc_valid[1:0];             	//Valid data indicator for each VC buffer
reg [1:0] selected_vc;		//Selected VC

//VC allocation & Flow control
always @(posedge clk or posedge reset) begin
    if(reset) begin
       vc_valid[0]<=1'b0;
       vc_valid[1]<=1'b0;
       selected_vc<=2'b00;
    end
    else if(req && ready) begin
       vc_buffer[in_vc]<=in_data;    //Store flit in buffer
       vc_head[in_vc]<=in_head;
       vc_tail[in_vc]<=in_tail;
       vc_valid[in_vc]<=1'b1;	     //VC is valid with data
//Select VC for transmission       
       if(vc_valid[0]) begin
	  selected_vc<=2'b00;	     //Select VC0
       end
       else if(vc_valid[1]) begin
	   selected_vc<=2'b01;       //Select VC1
       end
    end
end

//Transmission
assign out_data=vc_buffer[selected_vc];	  //Send data from selected VC
assign out_vc=selected_vc;
assign grant=vc_valid[selected_vc] && ready;  //Transmit only when valid data is der and next router is ready

//Reset valid flag after transmission
always@(posedge clk) begin
    if(grant) begin
       vc_valid[selected_vc]<=1'b0;
    end
end
endmodule
	